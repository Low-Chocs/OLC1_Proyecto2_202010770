/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[2,5,63,68,69,70,71,72,73],$V9=[27,30,39],$Va=[24,26],$Vb=[2,25],$Vc=[1,30],$Vd=[1,33],$Ve=[1,43],$Vf=[1,50],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,57],$Vr=[1,55],$Vs=[1,56],$Vt=[1,58],$Vu=[1,59],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[8,26,31,39,50,66,87,88,89,90,91,93,94,95,96,97,98,99,100,102],$VK=[1,100],$VL=[1,102],$VM=[26,39],$VN=[1,107],$VO=[26,31,39],$VP=[8,26,31,39,50,66,99,100,102],$VQ=[1,136],$VR=[1,152],$VS=[1,154],$VT=[1,155],$VU=[1,156],$VV=[1,157],$VW=[1,158],$VX=[1,159],$VY=[1,160],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[8,26,31,39,50,66,87,88,93,94,95,96,97,98,99,100,102],$V11=[8,26,31,39,50,66,93,94,99,100,102],$V21=[8,26,31,39,50,66,93,94,95,96,97,98,99,100,102],$V31=[2,5,27,37,41,42,45,53,54,55,59,60,61,63,65,68,69,70,71,72,73],$V41=[2,27,37,42,45,53,54,55,59,60,61,65,69,70,71,72,73],$V51=[1,193],$V61=[1,190],$V71=[1,191],$V81=[1,192],$V91=[8,39],$Va1=[26,31],$Vb1=[1,263],$Vc1=[1,262],$Vd1=[45,49,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESGLOBALES":4,"EOF":5,"INSTRUCCIONGLOBAL":6,"DECLARACION":7,";":8,"VECTOR":9,"FUNCION":10,"LLAMADAEXECUTE":11,"INSTRUCCIONES":12,"INSTRUCCION":13,"INCDEC":14,"ASIGNACION":15,"IF":16,"SWITCH":17,"BUCLES":18,"TRANSFERENCIA":19,"PRINT":20,"LLAMADAFUNCION":21,"TIPO":22,"IDENTIFICADORES":23,"=":24,"EXPRESION":25,",":26,"T_id":27,"++":28,"--":29,"[":30,"]":31,"R_new":32,"VECTORES":33,"VALOR":34,"VALORES":35,"EXPRESIONES":36,"R_if":37,"(":38,")":39,"BLOQUE":40,"R_else":41,"R_switch":42,"{":43,"CASEBLOCK":44,"}":45,"CASELIST":46,"DEFAULT":47,"CASE":48,"R_case":49,":":50,"INSTRUCTIONS":51,"RW_default":52,"R_while":53,"R_do":54,"R_for":55,"FORARGS":56,"INICIALIZACION":57,"ACTUALIZACION":58,"R_break":59,"R_continue":60,"R_return":61,"PARAMETROS":62,"R_void":63,"PARAMETRO":64,"R_cout":65,"<<":66,"R_endl":67,"R_execute":68,"R_int":69,"R_double":70,"R_bool":71,"R_string":72,"R_char":73,"ARITMETICOS":74,"RELACIONALES":75,"LOGICAS":76,"TERNARIO":77,"CASTEO":78,"ACCESOVECTOR":79,"FUNCIONESNATIVAS":80,"T_int":81,"T_double":82,"T_string":83,"T_char":84,"R_true":85,"R_false":86,"+":87,"-":88,"*":89,"/":90,"%":91,"R_pow":92,"==":93,"!=":94,"<=":95,">=":96,"<":97,">":98,"||":99,"&&":100,"!":101,"?":102,"R_toLower":103,"EXP":104,"R_toUpper":105,"R_round":106,".":107,"R_length":108,"R_typeOf":109,"R_toString":110,"R_c_str":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",24:"=",26:",",27:"T_id",28:"++",29:"--",30:"[",31:"]",32:"R_new",37:"R_if",38:"(",39:")",41:"R_else",42:"R_switch",43:"{",45:"}",49:"R_case",50:":",51:"INSTRUCTIONS",52:"RW_default",53:"R_while",54:"R_do",55:"R_for",59:"R_break",60:"R_continue",61:"R_return",63:"R_void",65:"R_cout",66:"<<",67:"R_endl",68:"R_execute",69:"R_int",70:"R_double",71:"R_bool",72:"R_string",73:"R_char",81:"T_int",82:"T_double",83:"T_string",84:"T_char",85:"R_true",86:"R_false",87:"+",88:"-",89:"*",90:"/",91:"%",92:"R_pow",93:"==",94:"!=",95:"<=",96:">=",97:"<",98:">",99:"||",100:"&&",101:"!",102:"?",103:"R_toLower",104:"EXP",105:"R_toUpper",106:"R_round",107:".",108:"R_length",109:"R_typeOf",110:"R_toString",111:"R_c_str"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,1],[6,2],[6,1],[12,2],[12,1],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,2],[13,2],[13,2],[13,1],[7,4],[23,3],[23,1],[14,2],[14,2],[9,15],[9,10],[9,8],[9,6],[33,3],[35,3],[35,1],[34,3],[15,9],[15,6],[15,3],[16,5],[16,7],[16,7],[17,7],[44,2],[44,1],[44,1],[46,2],[46,1],[48,4],[48,3],[47,3],[47,2],[18,5],[18,7],[18,5],[56,5],[57,4],[57,1],[58,1],[58,1],[19,1],[19,1],[19,1],[19,2],[10,6],[10,6],[10,5],[10,5],[62,3],[62,1],[64,2],[40,3],[40,2],[21,4],[21,3],[20,5],[20,3],[11,2],[22,1],[22,1],[22,1],[22,1],[22,1],[36,3],[36,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,2],[74,6],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[76,3],[76,3],[76,2],[77,5],[78,4],[79,7],[79,4],[80,4],[80,4],[80,4],[80,5],[80,4],[80,4],[80,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9: case 22:
console.error({tipo: 'SINTACTICO', inesperado: yytext ,  linea: this._$.first_line , columna: this._$.first_column});
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,22:10,63:$V1,68:$V2,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{1:[3]},{2:$V0,5:[1,18],6:19,7:5,9:6,10:7,11:8,22:10,63:$V1,68:$V2,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{1:[2,2]},o($V8,[2,4]),{8:[1,20]},{8:[1,21]},o($V8,[2,7]),{8:[1,22]},o($V8,[2,9]),{23:23,27:[1,24]},{27:[1,25]},{21:26,27:[1,27]},o($V9,[2,78]),o($V9,[2,79]),o($V9,[2,80]),o($V9,[2,81]),o($V9,[2,82]),{1:[2,1]},o($V8,[2,3]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,8]),{24:[1,28],26:[1,29]},o($Va,$Vb,{30:$Vc,38:[1,31]}),{38:[1,32]},{8:[2,77]},{38:$Vd},{21:42,25:34,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{27:[1,60]},{31:[1,61]},{22:65,39:[1,63],62:62,64:64,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{22:65,39:[1,67],62:66,64:64,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{21:42,25:70,27:$Ve,36:68,38:$Vf,39:[1,69],74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{8:[2,23],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),o($VJ,[2,88]),o($VJ,[2,89]),o($VJ,[2,90]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93],{30:[1,85],38:$Vd}),o($VJ,[2,94]),o($VJ,[2,95]),o($VJ,[2,96]),o($VJ,[2,97]),o($VJ,[2,98]),o($VJ,[2,99]),{21:42,22:87,25:86,27:$Ve,38:$Vf,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:88,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{38:[1,89]},{21:42,25:90,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{38:[1,91]},{38:[1,92]},{38:[1,93]},{107:[1,94]},{38:[1,95]},{38:[1,96]},o($Va,[2,24]),{24:[1,98],30:[1,97]},{26:$VK,39:[1,99]},{40:101,43:$VL},o($VM,[2,69]),{27:[1,103]},{26:$VK,39:[1,104]},{40:105,43:$VL},{26:$VN,39:[1,106]},o($VJ,[2,74]),o($VO,[2,84],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI}),{21:42,25:108,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:109,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:110,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:111,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:112,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:113,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:114,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:115,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:116,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:117,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:118,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:119,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:120,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:121,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:122,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{39:[1,123],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{39:[1,124]},o($VJ,[2,106]),{21:42,25:125,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($VP,[2,116],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF}),{104:[1,126]},{104:[1,127]},{104:[1,128]},{108:[1,129],111:[1,130]},{104:[1,131]},{104:[1,132]},{31:[1,133]},{30:$VQ,32:[1,134],34:135},{40:137,43:$VL},{22:65,64:138,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},o($V8,[2,66]),{2:$VR,7:142,9:144,12:139,13:141,14:143,15:145,16:146,17:147,18:148,19:149,20:150,21:151,22:153,27:$VS,37:$VT,42:$VU,45:[1,140],53:$VV,54:$VW,55:$VX,59:$VY,60:$VZ,61:$V_,65:$V$,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},o($VM,[2,70]),{40:164,43:$VL},o($V8,[2,67]),o($VJ,[2,73]),{21:42,25:165,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($V01,[2,101],{89:$Vx,90:$Vy,91:$Vz}),o($V01,[2,102],{89:$Vx,90:$Vy,91:$Vz}),o($VJ,[2,103]),o($VJ,[2,104]),o($VJ,[2,105]),o($V11,[2,108],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,95:$VC,96:$VD,97:$VE,98:$VF}),o($V11,[2,109],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,95:$VC,96:$VD,97:$VE,98:$VF}),o($V21,[2,110],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz}),o($V21,[2,111],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz}),o($V21,[2,112],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz}),o($V21,[2,113],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz}),o([8,26,31,39,50,66,99,102],[2,114],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,100:$VH}),o($VP,[2,115],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF}),{50:[1,166],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{31:[1,167],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($VJ,[2,100]),{21:42,25:168,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{26:[1,169],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{39:[1,170]},{39:[1,171]},{39:[1,172]},{38:[1,173]},{38:[1,174]},{39:[1,175]},{39:[1,176]},{24:[1,177]},{22:178,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{8:[2,31]},{21:42,25:70,27:$Ve,36:179,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($V8,[2,64]),o($VM,[2,68]),{2:$VR,7:142,9:144,13:181,14:143,15:145,16:146,17:147,18:148,19:149,20:150,21:151,22:153,27:$VS,37:$VT,42:$VU,45:[1,180],53:$VV,54:$VW,55:$VX,59:$VY,60:$VZ,61:$V_,65:$V$,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},o($V31,[2,72]),o($V41,[2,11]),{8:[1,182]},{8:[1,183]},{8:[1,184]},{8:[1,185]},o($V41,[2,16]),o($V41,[2,17]),o($V41,[2,18]),{8:[1,186]},{8:[1,187]},{8:[1,188]},o($V41,[2,22]),{23:23,27:[1,189]},{24:$V51,28:$V61,29:$V71,30:$V81,38:$Vd},{38:[1,194]},{38:[1,195]},{38:[1,196]},{40:197,43:$VL},{38:[1,198]},{8:[2,60]},{8:[2,61]},{8:[2,62],21:42,25:199,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{66:[1,200]},o($V8,[2,65]),o($VO,[2,83],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI}),{21:42,25:201,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($VJ,[2,120],{30:[1,202]}),o($VJ,[2,118]),{21:42,25:203,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($VJ,[2,121]),o($VJ,[2,122]),o($VJ,[2,123]),{39:[1,204]},{39:[1,205]},o($VJ,[2,125]),o($VJ,[2,126]),{30:[1,208],32:[1,206],33:207},{30:[1,209]},{26:$VN,31:[1,210]},o($V31,[2,71]),o($V41,[2,10]),o($V41,[2,12]),o($V41,[2,13]),o($V41,[2,14]),o($V41,[2,15]),o($V41,[2,19]),o($V41,[2,20]),o($V41,[2,21]),o($Va,$Vb,{30:$Vc}),o($V91,[2,26]),o($V91,[2,27]),{21:42,25:211,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:212,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:213,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:214,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:215,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{53:[1,216]},{15:220,22:219,27:[1,221],56:217,57:218,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{8:[2,63],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{21:42,25:222,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o([8,26,31,39,50,66,102],[2,117],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH}),{21:42,25:223,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{39:[1,224],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($VJ,[2,124]),o($VJ,[2,127]),{22:225,69:$V3,70:$V4,71:$V5,72:$V6,73:$V7},{8:[2,30]},{30:$VQ,34:227,35:226},{21:42,25:228,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o([8,26,31],[2,35]),{31:[1,229],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($V91,[2,38],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI}),{39:[1,230],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{39:[1,231],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{39:[1,232],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{38:[1,233]},{39:[1,234]},{8:[1,235]},{27:[1,236]},{8:[2,57]},{24:$V51,30:$V81},{8:[2,76],66:[1,237],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{31:[1,238],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($VJ,[2,107]),{30:[1,239]},{26:[1,241],31:[1,240]},o($Va1,[2,34]),{31:[1,242],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{24:[1,244],30:[1,243]},{40:245,43:$VL},{43:[1,246]},{40:247,43:$VL},{21:42,25:248,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{40:249,43:$VL},{21:42,25:250,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{24:[1,251]},{67:[1,252]},o($VJ,[2,119]),{21:42,25:253,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{8:[2,32]},{30:$VQ,34:254},{8:[2,29]},{21:42,25:255,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:256,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},o($V41,[2,39],{41:[1,257]}),{44:258,46:259,47:260,48:261,49:$Vb1,52:$Vc1},o($V41,[2,52]),{39:[1,264],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($V41,[2,54]),{8:[1,265],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{21:42,25:266,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{8:[2,75]},{31:[1,267],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($Va1,[2,33]),{31:[1,268],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($V91,[2,37],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI}),{16:270,37:$VT,40:269,43:$VL},{45:[1,271]},{45:[2,44],47:272,48:273,49:$Vb1,52:$Vc1},{45:[2,45]},o($Vd1,[2,47]),{50:[1,274]},{21:42,25:275,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{8:[1,276]},{14:278,15:279,27:[1,280],58:277},{8:[2,56],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},{30:[1,281]},{24:[1,282]},o($V41,[2,40]),o($V41,[2,41]),o($V41,[2,42]),{45:[2,43]},o($Vd1,[2,46]),{45:[2,51],51:[1,283]},{50:[1,284],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($V41,[2,53]),{39:[2,55]},{39:[2,58]},{39:[2,59]},{24:$V51,28:$V61,29:$V71,30:$V81},{21:42,25:285,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{21:42,25:286,27:$Ve,38:$Vf,74:35,75:36,76:37,77:38,78:39,79:40,80:41,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,88:$Vm,92:$Vn,101:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,109:$Vt,110:$Vu},{45:[2,50]},o($Vd1,[2,49],{51:[1,287]}),{31:[1,288],87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI},o($V91,[2,36],{87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,93:$VA,94:$VB,95:$VC,96:$VD,97:$VE,98:$VF,99:$VG,100:$VH,102:$VI}),o($Vd1,[2,48]),{8:[2,28]}],
defaultActions: {3:[2,2],18:[2,1],26:[2,77],135:[2,31],160:[2,60],161:[2,61],207:[2,30],220:[2,57],240:[2,32],242:[2,29],252:[2,75],260:[2,45],272:[2,43],277:[2,55],278:[2,58],279:[2,59],283:[2,50],288:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 69
break;
case 1:return 70
break;
case 2:return 71
break;
case 3:return 73
break;
case 4:return 72
break;
case 5:return 85
break;
case 6:return 86
break;
case 7:return 92
break;
case 8:return 32
break;
case 9:return 37
break;
case 10:return 41
break;
case 11:return 42
break;
case 12:return 49
break;
case 13:return 'R_default'
break;
case 14:return 53
break;
case 15:return 55
break;
case 16:return 54
break;
case 17:return 59
break;
case 18:return 60
break;
case 19:return 61
break;
case 20:return 63
break;
case 21:return 65
break;
case 22:return 67
break;
case 23:return 103
break;
case 24:return 105
break;
case 25:return 106
break;
case 26:return 108
break;
case 27:return 109
break;
case 28:return 110
break;
case 29:return 111
break;
case 30:return 68
break;
case 31:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2);return 83
break;
case 32:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2);return 84
break;
case 33:return 27
break;
case 34:return 82
break;
case 35:return 81
break;
case 36:return 28
break;
case 37:return 29
break;
case 38:return 87
break;
case 39:return 88
break;
case 40:return 89
break;
case 41:return 90
break;
case 42:return 91
break;
case 43:return 38
break;
case 44:return 39
break;
case 45:return 30
break;
case 46:return 31
break;
case 47:return 43
break;
case 48:return 45
break;
case 49:return 93
break;
case 50:return 24
break;
case 51:return 107
break;
case 52:return 26
break;
case 53:return 50
break;
case 54:return 8
break;
case 55:return 99
break;
case 56:return 100
break;
case 57:return 94
break;
case 58:return 101
break;
case 59:return 66
break;
case 60:return 95
break;
case 61:return 96
break;
case 62:return 97
break;
case 63:return 98
break;
case 64:return 102
break;
case 65:
break;
case 66:
break;
case 67:
break;
case 68:
break;
case 69:console.log({tipo: 'LEXICO', inesperado: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column})
break;
case 70:return 5
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:pow\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:("(([^\n\"\\]|\\.))*"))/i,/^(?:('(([^\n\"\\]|\\.))'))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([\-]?[0-9]+\.[0-9]+\b))/i,/^(?:([\-]?[0-9]+\b))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\s+)/i,/^(?:[ \n\r])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}